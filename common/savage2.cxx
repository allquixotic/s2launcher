// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "savage2.hxx"

namespace s2launcher
{
  // Base
  // 

  const Base::ModSequence& Base::
  getMod () const
  {
    return this->mod_;
  }

  Base::ModSequence& Base::
  getMod ()
  {
    return this->mod_;
  }

  void Base::
  setMod (const ModSequence& s)
  {
    this->mod_ = s;
  }


  // Mod
  // 

  const Mod::NameType& Mod::
  getName () const
  {
    return this->name_.get ();
  }

  Mod::NameType& Mod::
  getName ()
  {
    return this->name_.get ();
  }

  void Mod::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void Mod::
  setName (::std::auto_ptr< NameType > x)
  {
    this->name_.set (x);
  }

  const Mod::DescriptionType& Mod::
  getDescription () const
  {
    return this->description_.get ();
  }

  Mod::DescriptionType& Mod::
  getDescription ()
  {
    return this->description_.get ();
  }

  void Mod::
  setDescription (const DescriptionType& x)
  {
    this->description_.set (x);
  }

  void Mod::
  setDescription (::std::auto_ptr< DescriptionType > x)
  {
    this->description_.set (x);
  }

  const Mod::HashType& Mod::
  getHash () const
  {
    return this->hash_.get ();
  }

  Mod::HashType& Mod::
  getHash ()
  {
    return this->hash_.get ();
  }

  void Mod::
  setHash (const HashType& x)
  {
    this->hash_.set (x);
  }

  void Mod::
  setHash (::std::auto_ptr< HashType > x)
  {
    this->hash_.set (x);
  }

  const Mod::UrldownloadType& Mod::
  getUrldownload () const
  {
    return this->urldownload_.get ();
  }

  Mod::UrldownloadType& Mod::
  getUrldownload ()
  {
    return this->urldownload_.get ();
  }

  void Mod::
  setUrldownload (const UrldownloadType& x)
  {
    this->urldownload_.set (x);
  }

  void Mod::
  setUrldownload (::std::auto_ptr< UrldownloadType > x)
  {
    this->urldownload_.set (x);
  }

  const Mod::UrlpictureType& Mod::
  getUrlpicture () const
  {
    return this->urlpicture_.get ();
  }

  Mod::UrlpictureType& Mod::
  getUrlpicture ()
  {
    return this->urlpicture_.get ();
  }

  void Mod::
  setUrlpicture (const UrlpictureType& x)
  {
    this->urlpicture_.set (x);
  }

  void Mod::
  setUrlpicture (::std::auto_ptr< UrlpictureType > x)
  {
    this->urlpicture_.set (x);
  }

  const Mod::BytesizeType& Mod::
  getBytesize () const
  {
    return this->bytesize_.get ();
  }

  Mod::BytesizeType& Mod::
  getBytesize ()
  {
    return this->bytesize_.get ();
  }

  void Mod::
  setBytesize (const BytesizeType& x)
  {
    this->bytesize_.set (x);
  }


  // Hash
  // 
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace s2launcher
{
  // Base
  //

  Base::
  Base ()
  : ::xml_schema::Type (),
    mod_ (::xml_schema::Flags (), this)
  {
  }

  Base::
  Base (const Base& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    mod_ (x.mod_, f, this)
  {
  }

  Base::
  Base (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    mod_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Base::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // mod
      //
      if (n.name () == "mod" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< ModType > r (
          ModTraits::create (i, f, this));

        this->mod_.push_back (r);
        continue;
      }

      break;
    }
  }

  Base* Base::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Base (*this, f, c);
  }

  Base::
  ~Base ()
  {
  }

  // Mod
  //

  Mod::
  Mod (const NameType& name,
       const DescriptionType& description,
       const HashType& hash,
       const UrldownloadType& urldownload,
       const UrlpictureType& urlpicture,
       const BytesizeType& bytesize)
  : ::xml_schema::Type (),
    name_ (name, ::xml_schema::Flags (), this),
    description_ (description, ::xml_schema::Flags (), this),
    hash_ (hash, ::xml_schema::Flags (), this),
    urldownload_ (urldownload, ::xml_schema::Flags (), this),
    urlpicture_ (urlpicture, ::xml_schema::Flags (), this),
    bytesize_ (bytesize, ::xml_schema::Flags (), this)
  {
  }

  Mod::
  Mod (const Mod& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    description_ (x.description_, f, this),
    hash_ (x.hash_, f, this),
    urldownload_ (x.urldownload_, f, this),
    urlpicture_ (x.urlpicture_, f, this),
    bytesize_ (x.bytesize_, f, this)
  {
  }

  Mod::
  Mod (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (f, this),
    description_ (f, this),
    hash_ (f, this),
    urldownload_ (f, this),
    urlpicture_ (f, this),
    bytesize_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Mod::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // description
      //
      if (n.name () == "description" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< DescriptionType > r (
          DescriptionTraits::create (i, f, this));

        if (!description_.present ())
        {
          this->description_.set (r);
          continue;
        }
      }

      // hash
      //
      if (n.name () == "hash" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< HashType > r (
          HashTraits::create (i, f, this));

        if (!hash_.present ())
        {
          this->hash_.set (r);
          continue;
        }
      }

      // urldownload
      //
      if (n.name () == "urldownload" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< UrldownloadType > r (
          UrldownloadTraits::create (i, f, this));

        if (!urldownload_.present ())
        {
          this->urldownload_.set (r);
          continue;
        }
      }

      // urlpicture
      //
      if (n.name () == "urlpicture" && n.namespace_ () == "s2launcher")
      {
        ::std::auto_ptr< UrlpictureType > r (
          UrlpictureTraits::create (i, f, this));

        if (!urlpicture_.present ())
        {
          this->urlpicture_.set (r);
          continue;
        }
      }

      // bytesize
      //
      if (n.name () == "bytesize" && n.namespace_ () == "s2launcher")
      {
        if (!bytesize_.present ())
        {
          this->bytesize_.set (BytesizeTraits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "s2launcher");
    }

    if (!description_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "description",
        "s2launcher");
    }

    if (!hash_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "hash",
        "s2launcher");
    }

    if (!urldownload_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "urldownload",
        "s2launcher");
    }

    if (!urlpicture_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "urlpicture",
        "s2launcher");
    }

    if (!bytesize_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bytesize",
        "s2launcher");
    }
  }

  Mod* Mod::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Mod (*this, f, c);
  }

  Mod::
  ~Mod ()
  {
  }

  // Hash
  //

  Hash::
  Hash ()
  : ::xml_schema::Token ()
  {
  }

  Hash::
  Hash (const char* _xsd_Token_base)
  : ::xml_schema::Token (_xsd_Token_base)
  {
  }

  Hash::
  Hash (const ::std::string& _xsd_Token_base)
  : ::xml_schema::Token (_xsd_Token_base)
  {
  }

  Hash::
  Hash (const ::xml_schema::Token& _xsd_Token_base)
  : ::xml_schema::Token (_xsd_Token_base)
  {
  }

  Hash::
  Hash (const Hash& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Token (x, f, c)
  {
  }

  Hash::
  Hash (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Token (e, f, c)
  {
  }

  Hash::
  Hash (const ::xercesc::DOMAttr& a,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Token (a, f, c)
  {
  }

  Hash::
  Hash (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Token (s, e, f, c)
  {
  }

  Hash* Hash::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Hash (*this, f, c);
  }

  Hash::
  ~Hash ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace s2launcher
{
  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::s2launcher::parseBase (isrc, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::s2launcher::parseBase (isrc, h, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::s2launcher::parseBase (isrc, h, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::s2launcher::parseBase (isrc, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::s2launcher::parseBase (isrc, h, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::s2launcher::parseBase (isrc, h, f, p);
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::s2launcher::Base > r (
      ::s2launcher::parseBase (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::s2launcher::Base > r (
        ::s2launcher::parseBase (
          c, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "base" &&
        n.namespace_ () == "s2launcher")
    {
      ::std::auto_ptr< ::s2launcher::Base > r (
        ::xsd::cxx::tree::traits< ::s2launcher::Base, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "base",
      "s2launcher");
  }

  ::std::auto_ptr< ::s2launcher::Base >
  parseBase (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "base" &&
        n.namespace_ () == "s2launcher")
    {
      ::std::auto_ptr< ::s2launcher::Base > r (
        ::xsd::cxx::tree::traits< ::s2launcher::Base, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "base",
      "s2launcher");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace s2launcher
{
  void
  serializeBase (::std::ostream& o,
                 const ::s2launcher::Base& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeBase (::std::ostream& o,
                 const ::s2launcher::Base& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeBase (::std::ostream& o,
                 const ::s2launcher::Base& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeBase (::xercesc::XMLFormatTarget& t,
                 const ::s2launcher::Base& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeBase (::xercesc::XMLFormatTarget& t,
                 const ::s2launcher::Base& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeBase (::xercesc::XMLFormatTarget& t,
                 const ::s2launcher::Base& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::s2launcher::serializeBase (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeBase (::xercesc::DOMDocument& d,
                 const ::s2launcher::Base& s,
                 ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "base" &&
        n.namespace_ () == "s2launcher")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "base",
        "s2launcher");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  serializeBase (const ::s2launcher::Base& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "base",
        "s2launcher",
        m, f));

    ::s2launcher::serializeBase (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Base& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // mod
    //
    for (Base::ModConstIterator
         b (i.getMod ().begin ()), n (i.getMod ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mod",
          "s2launcher",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Mod& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "s2launcher",
          e));

      s << i.getName ();
    }

    // description
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "description",
          "s2launcher",
          e));

      s << i.getDescription ();
    }

    // hash
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hash",
          "s2launcher",
          e));

      s << i.getHash ();
    }

    // urldownload
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "urldownload",
          "s2launcher",
          e));

      s << i.getUrldownload ();
    }

    // urlpicture
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "urlpicture",
          "s2launcher",
          e));

      s << i.getUrlpicture ();
    }

    // bytesize
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bytesize",
          "s2launcher",
          e));

      s << i.getBytesize ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Hash& i)
  {
    e << static_cast< const ::xml_schema::Token& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const Hash& i)
  {
    a << static_cast< const ::xml_schema::Token& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const Hash& i)
  {
    l << static_cast< const ::xml_schema::Token& > (i);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

